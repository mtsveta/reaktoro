// Reaktoro is a unified framework for modeling chemically reactive systems.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library. If not, see <http://www.gnu.org/licenses/>.

#pragma once

// C++ includes
#include <chrono>
#include <fstream>
#include <iostream>
#include <list>

// Reaktoro includes
#include <Reaktoro/Core/ChemicalOutput.hpp>
#include <Reaktoro/Core/ChemicalState.hpp>
#include <Reaktoro/Core/ChemicalSystem.hpp>
#include <Reaktoro/Equilibrium/EquilibriumProfiling.hpp>
#include <Reaktoro/Equilibrium/EquilibriumResult.hpp>
#include <Reaktoro/Equilibrium/EquilibriumSolver.hpp>
#include <Reaktoro/Equilibrium/SmartEquilibriumSolver.hpp>
#include <Reaktoro/Math/Matrix.hpp>
#include <Reaktoro/Transport/ReactiveTransportOptions.hpp>
#include <Reaktoro/Transport/ReactiveTransportProfiling.hpp>
#include <Reaktoro/Transport/ReactiveTransportResult.hpp>
#include <Reaktoro/Transport/TransportSolver.hpp>

namespace Reaktoro {

/// Use this class for solving reactive transport problems.
class ReactiveTransportSolver
{
public:
    /// Construct a default ReactiveTransportSolver instance.
    /// @see ChemicalSystem
    ReactiveTransportSolver(const ChemicalSystem& system);

    /// Set the options for the reactive transport calculations.
    auto setOptions(const ReactiveTransportOptions& options) -> void;

    /// Initialize the mesh discretizing the computational domain for reactive transport.
    /// @see Mesh
    auto setMesh(const Mesh& mesh) -> void;

    /// Initialize the velocity of the reactive transport model.
    auto setVelocity(double val) -> void;

    /// Initialize the diffusion of the reactive transport model.
    auto setDiffusionCoeff(double val) -> void;

    /// Initialize boundary conditions of the reactive transport model.
    /// Method initializes the boundary condition of the reactive transport model
    /// by setting there equilibrated ChemicalState
    /// @see ChemicalState
    auto setBoundaryState(const ChemicalState& state) -> void;

    /// Initialize time step of the reactive transport sequential algorithm.
    auto setTimeStep(double val) -> void;

    /// Get the chemical system initialized to the reactive transport model.
    /// @see ChemicalSystem
    auto system() const -> const ChemicalSystem&;

    /// Add the output to the reactive transport modelling
    /// This method add new chemical output to the list of existing outputs
    /// and return the added element
    /// @see ChemicalOutput
    auto output() -> ChemicalOutput;

    /// Initialize components of the reactive transport model
    /// Initialize the mesh, the number of elements and cells, amounts of a fluid and
    /// solid elements as well as amounts of elements on each cell of the mesh.
    /// Finally, it initializes the matrix of the systems generated by discretized
    /// transport equation
    auto initialize() -> void;

    /// Make a step of the reactive transport time-stepping scheme
    /// @see ChemicalField
    auto step(ChemicalField& field) -> ReactiveTransportResult;

    /// Output profiling results to the file
    auto outputProfiling(const std::string& folder) -> void;

private:
    /// The chemical system common to all degrees of freedom in the chemical field.
    ChemicalSystem system_;

    /// The solver for solving the transport equations
    TransportSolver transportsolver;

    /// The options for the reactive transport calculations.
    ReactiveTransportOptions options;

    /// The profiling information of the operations in a reactive transport time step calculation.
    ReactiveTransportProfiling profiling;

    /// The equilibrium solver using conventional Gibbs energy minimization approach.
    EquilibriumSolver equilibrium_solver;

    /// The equilibrium solver using a smart on-demand learning strategy.
    SmartEquilibriumSolver smart_equilibrium_solver;

    /// The list of chemical output objects
    std::vector<ChemicalOutput> outputs;

    /// The amounts of fluid elements on the boundary.
    Vector bbc;

    /// The amounts of a fluid element on each cell of the mesh.
    Matrix bf;

    /// The amounts of a solid element on each cell of the mesh.
    Matrix bs;

    /// The amounts of an element on each cell of the mesh.
    Matrix b;

    /// The current number of steps in the solution of the reactive transport equations.
    Index steps = 0;

    /// Name of the file and folder with a status output
    std::string folder;
};

} // namespace Reaktoro
